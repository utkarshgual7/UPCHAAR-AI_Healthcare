import express, { json } from 'express';
import { connect } from 'mongoose';
import { config } from 'dotenv';
import path from 'path';
import { default as authRoutes } from './src/routes/auth.route.js';
import cors from 'cors'
import generateSitemap from './generate-sitemap.js';



config();

connect(process.env.MONGO_URI)
  .then(() => {
    console.log('MongoDB is connected');
  })
  .catch((err) => {
    console.error('MongoDB connection error:', err);
  });


const __dirname = path.resolve();


const app = express();
app.use(cors());
// Set up caching durations
const oneYearInSeconds = 31536000;
const oneMonthInSeconds = 2592000;
const tenMinutesInSeconds = 600;
// Serve static files generated by React build with caching headers
app.use('/static/css', express.static(path.join(__dirname, 'upchaarvone', 'dist', 'static', 'css'), {
  maxAge: oneYearInSeconds * 1000,
  immutable: true,
}));

app.use('/static/js', express.static(path.join(__dirname, 'upchaarvone', 'dist', 'static', 'js'), {
  maxAge: oneYearInSeconds * 1000,
  immutable: true,
}));

app.use('/static/media', express.static(path.join(__dirname, 'upchaarvone', 'dist', 'static', 'media'), {
  maxAge: oneMonthInSeconds * 1000,
}));

// Serve the React app's main index.html with a short cache duration
app.use('/', express.static(path.join(__dirname, 'upchaarvone', 'dist'), {
  maxAge: tenMinutesInSeconds * 1000,
}));


app.use(json()); // Allows parsing of JSON data

app.use("/api/auth",authRoutes)


// Serve sitemap.xml
app.get('/sitemap.xml', (req, res) => {
  res.sendFile(path.join(__dirname, 'upchaarvone', 'dist', 'sitemap.xml'));
});

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'upchaarvone', 'dist', 'index.html'));
});


// Error handling middleware
app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500; // Default to 500 if statusCode not provided
  const message = err.message || 'Internal Server Error'; // Default message

  res.status(statusCode).json({
    success: false,
    statusCode,
    message,
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}!`);

  // Generate sitemap after the server starts
  generateSitemap().then(() => {
    console.log('Sitemap generation completed.');
  }).catch((error) => {
    console.error('Error generating sitemap:', error);
  });
});
